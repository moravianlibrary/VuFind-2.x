[General]
; This setting controls the MultiBackend driver's behavior when it can't
; determine which specific driver should be used to service a particular
; request. Select "use_first" if you would like MultiBackend to return
; the value generated by the first driver capable of responding to the
; specified method; select "merge" if you would like all potentially
; relevant responses to be combined into a single response (only works
; for array-oriented data).
default_fallback_driver_selection = merge

; (Optional) The name of a driver instance to use by default if no specific
; instance can be determined as the best option (must correspond with a key
; from the [Drivers] section below if set -- omit to have no default driver)
;default_driver = "instance1"

; This section is for declaring which driver to use for each institution.
; The key should be the Source ID of a specific institution, and the value
; should be the name of an ILS driver.
;      Example: instance1 = Voyager
; In this case, the Voyager driver would be loaded and configured using an
; instance1.ini file (which you should create as a copy of Voyager.ini).
[Drivers]
mzk = Aleph
;instance1 = Voyager
;instance2 = Voyager
;instance3 = Unicorn
;instance4 = Voyager

; This section allows for the use of custom delimeters between user data
; and the identifying information that allows the MultiBackend driver to
; determine which internal driver to use for a given request.
;
; Currently only custom login delimiters are supported.
;
; You should not set the delimiters to be common characters.
[Delimiters]
login = "	"

; This section allows you to override the default functionality set by
; default_fallback_driver_selection on a method-by-method basis. See above
; for explanations of legal values (merge/use_first)
[FallbackDriverSelectionOverride]
;getMyFines = merge
